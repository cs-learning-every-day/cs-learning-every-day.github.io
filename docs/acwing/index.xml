<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Day Day Up</title><link>https://cs-learning-every-day.github.io/docs/acwing/</link><description>Recent content on Day Day Up</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://cs-learning-every-day.github.io/docs/acwing/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/143/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/143/</guid><description>
Link</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/154/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/154/</guid><description>
Link
#include &amp;lt;iostream&amp;gt; using namespace std; const int N = 1000010; int n, k; int a[N], q[N]; int main() { cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k; for (int i = 0; i &amp;lt; n; i++) cin &amp;gt;&amp;gt; a[i]; int hh = 0, tt = -1; for (int i = 0; i &amp;lt; n; i++) { // 判断并更新窗口 if (hh &amp;lt;= tt &amp;amp;&amp;amp; i - k + 1 &amp;gt; q[hh]) hh++; while (hh &amp;lt;= tt &amp;amp;&amp;amp; a[q[tt]] &amp;gt;= a[i]) tt--; q[++tt] = i; if (i &amp;gt;= k - 1) cout &amp;lt;&amp;lt; a[q[hh]] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } cout &amp;lt;&amp;lt; endl; hh = 0, tt = -1; for (int i = 0; i &amp;lt; n; i++) { // 判断并更新窗口 if (hh &amp;lt;= tt &amp;amp;&amp;amp; i - k + 1 &amp;gt; q[hh]) hh++; while (hh &amp;lt;= tt &amp;amp;&amp;amp; a[q[tt]] &amp;lt;= a[i]) tt--; q[++tt] = i; if (i &amp;gt;= k - 1) cout &amp;lt;&amp;lt; a[q[hh]] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/786/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/786/</guid><description>
#include &amp;lt;iostream&amp;gt; using namespace std; int q[100001]; int quick_sort(int l, int r, int k) { if (l == r) { return q[l]; } int x = q[l], i = l - 1, j = r + 1; while (i &amp;lt; j) { while (q[++i] &amp;lt; x); while (q[--j] &amp;gt; x); if (i &amp;lt; j) { swap(q[i], q[j]); } } int sl = j - l + 1; if (k &amp;lt;= sl) return quick_sort(l, j, k); return quick_sort(j + 1, r, k - sl); } int main() { int n, k; cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k; for (int i = 0; i &amp;lt; n; i++) { cin &amp;gt;&amp;gt; q[i]; } cout &amp;lt;&amp;lt; quick_sort(0, n - 1, k); return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/788/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/788/</guid><description>
Link
class Solution { private int[] tmp; public int reversePairs(int[] nums) { tmp = new int[nums.length]; return mergeSort(nums, 0, nums.length - 1); } private int mergeSort(int[] nums, int l, int r) { if (l &amp;gt;= r) { return 0; } int mid = (l + r) &amp;gt;&amp;gt; 1; int res = mergeSort(nums, l, mid) + mergeSort(nums, mid + 1, r); // 归并 int i = l, j = mid + 1, k = 0; while (i &amp;lt;= mid &amp;amp;&amp;amp; j &amp;lt;= r) { if (nums[i] &amp;lt;= nums[j]) { tmp[k++] = nums[i++]; } else { tmp[k++] = nums[j++]; res += (mid - i + 1); } } while (i &amp;lt;= mid) { tmp[k++] = nums[i++]; } while (j &amp;lt;= r) { tmp[k++] = nums[j++]; } for (i = l, j = 0; i &amp;lt;= r; i++, j++) { nums[i] = tmp[j]; } return res; } }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/790/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/790/</guid><description>
#include &amp;lt;iostream&amp;gt; using namespace std; int main() { double x; cin &amp;gt;&amp;gt; x; double l = -1e4, r = 1e4; while (r - l &amp;gt; 1e-8) { double m = (l + r) / 2; if (m * m * m &amp;gt;= x) { r = m; } else { l = m; } } printf(&amp;#34;%.6lf&amp;#34;, r); return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/791/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/791/</guid><description>#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; const int N = 1e6 + 10; vecotr&amp;lt;int&amp;gt; add(vecotr&amp;lt;int&amp;gt; &amp;amp;A, vecotr&amp;lt;int&amp;gt; &amp;amp;B) { vector&amp;lt;int&amp;gt; C; int t = 0; for (int i = 0; i &amp;lt; A.size() || i &amp;lt; B.size(); i++) { if (i &amp;lt; A.size()) { t += A[i]; } if (i &amp;lt; B.size()) { t += B[i]; } C.push_back(t % 10); t /= 10; } if (t) { C.push_back(1); } return C; } int main() { string a, b; vecotr&amp;lt;int&amp;gt; A, B; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; // a = &amp;#34;123456&amp;#34; for (int i = a.</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/792/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/792/</guid><description>两个正整数相减 A - B 考虑A &amp;lt; 0, B &amp;lt; 0 &amp;ndash;&amp;gt; A - B = -(|A| + |B|) 考虑A &amp;gt; 0, B &amp;lt; 0 &amp;ndash;&amp;gt; A - B = |A| + |B|
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; // 判断A&amp;gt;=B bool cmp(vecotr&amp;lt;int&amp;gt; &amp;amp;A, vecotr&amp;lt;int&amp;gt; &amp;amp;B) { if (A.size() != B.size()) { return A.size() &amp;gt; B.size(); } for (int i = A.size() - 1; i &amp;gt;= 0; i--) { if (A[i] !</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/793/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/793/</guid><description>两个正整数相乘 大*小
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; vecotr&amp;lt;int&amp;gt; mul(vecotr&amp;lt;int&amp;gt; &amp;amp;A, int b) { vecotr&amp;lt;int&amp;gt; C; int t = 0; for (int i = 0; i &amp;lt; A.size() || t != 0; i++) { if (i &amp;lt; A.size()) { t += A[i] * b; } C.push_back(t % 10); t /= 10; } return C; } int main() { string a; int b; vecotr&amp;lt;int&amp;gt; A, vector&amp;lt;int&amp;gt; C; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; // a = &amp;#34;123456&amp;#34; for (int i = a.</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/794/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/794/</guid><description>两个正整数相除 大/小
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; vecotr&amp;lt;int&amp;gt; div(vecotr&amp;lt;int&amp;gt; &amp;amp;A, int b, int &amp;amp;r) { vecotr&amp;lt;int&amp;gt; C; int t = 0; r = 0; for (int i = A.size(); i &amp;gt;= 0; i--) { r = r * 10 + A[i]; C.push_back(r / b); r = r % b; } reverse(C.begin(), C.end()); while (C.size() &amp;gt; 1 &amp;amp;&amp;amp; C.back() == 0) { C.pop_back(); } return C; } int main() { string a; int b; vecotr&amp;lt;int&amp;gt; A, vector&amp;lt;int&amp;gt; C; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; // a = &amp;#34;123456&amp;#34; for (int i = a.</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/795/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/795/</guid><description>
S[i] = a[1] + a[2] + ... a[i]
a[l] + ... + a[r] = S[r] - S[l - 1]
#include &amp;lt;iostream&amp;gt;using namespace std; const int N = 100010; int n, m; int a[N], s[N]; int main() { a[0] = 0; s[0] = 0; scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;m); for (int i = 1; i &amp;lt;= n; i++) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i]); } for (int i = 1; i &amp;lt;= n; i++) { s[i] = s[i - 1] + a[i]; } while (m--) { int l, r; scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;r, &amp;amp;l); printf(&amp;#34;%d\n&amp;#34;, s[r] - s[l - 1]); } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/796/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/796/</guid><description>
S[i, j] = 第i行j列格子左上部分所有元素的和
以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：
S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]
#include &amp;lt;iostream&amp;gt; const int N = 1010; int n, m, q; int a[N][N], s[N][N]; int main() { scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;n, &amp;amp;m, &amp;amp;q); for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i][j]); } } for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j]; } } while (q--) { int x1, y1, x2, y2; scanf(&amp;#34;%d%d%d%d&amp;#34;, &amp;amp;x1, &amp;amp;y1, &amp;amp;x2, &amp;amp;y2); printf(&amp;#34;%d\n&amp;#34;, s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 -1] + s[x1 - 1][y1 -1]); } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/797/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/797/</guid><description>
给区间[l, r]中的每个数加上c：B[l] += c, B[r + 1] -= c
#include &amp;lt;iostream&amp;gt;using namespace std; const int N = 100010; int n, m; int a[N], b[N]; void insert(int l, int r, int c) { b[l] += c; b[r + 1] -= c; } int main() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;m); for (int i = 1; i &amp;lt;= n; i++) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i]); } for (int i = 1; i &amp;lt;= n; i++) { insert(i, i, a[i]); } while (m--) { int l, r, c; scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;l, &amp;amp;r, &amp;amp;c); insert(l, r, c); } for (int i = 1; i &amp;lt;= n; i++) { b[i] += b[i - 1]; } for (int i = 1; i &amp;lt;= n; i++) { printf(&amp;#34;%d &amp;#34;, b[i]); } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/798/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/798/</guid><description>
给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：
S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c
#include &amp;lt;iostream&amp;gt;using namespace std; const int N = 1010; int n, m, q; int a[N][N], b[N][N]; void insert(int x1, int y1, int x2, int y2, int c) { b[x1][y1] += c; b[x2 + 1][y1] -= c; b[x1][y2 + 1] -= c; b[x2 + 1][y2 + 1] += c; } int main() { scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;n, &amp;amp;m, &amp;amp;q); for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i][j]); } } for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { insert(i, j, i, j, a[i][j]); } } while (q--) { int x1, y1, x2, y2, c; scanf(&amp;#34;%d%d%d%d%d&amp;#34;, &amp;amp;x1, &amp;amp;y1, &amp;amp;x2, &amp;amp;y2, &amp;amp;c); insert(x1, y1, x2, y2, c); } for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1]; } } for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { printf(&amp;#34;%d &amp;#34;, b[i][j]); } puts(&amp;#34;&amp;#34;); } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/799/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/799/</guid><description>
#include &amp;lt;iostream&amp;gt;using namespace std; int a[100010]; int s[100010]; int main() { int n; cin &amp;gt;&amp;gt; n; for (int i = 0; i &amp;lt; n; i++) { cin &amp;gt;&amp;gt; a[i]; } int maxLen = 0; for (int i = 0, j = 0; i &amp;lt; n; i++) { s[a[i]]++; while (s[a[i]] &amp;gt; 1) { s[a[j]]--; j++; } if ((i - j + 1) &amp;gt; maxLen) { maxLen = i - j + 1; } } cout &amp;lt;&amp;lt; maxLen &amp;lt;&amp;lt; endl; return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/801/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/801/</guid><description>
#include &amp;lt;iostream&amp;gt; using namespace std; int lowbit(int x) { return x &amp;amp; -x; } int main() { int n; cin &amp;gt;&amp;gt; n; while (n--) { int x; cin &amp;gt;&amp;gt; x; int cnt = 0; while (x != 0) { x -= lowbit(x); cnt++; } cout &amp;lt;&amp;lt; cnt &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } cout &amp;lt;&amp;lt; endl; return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/802/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/802/</guid><description>#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; typedef pair&amp;lt;int, int&amp;gt; PII; const int N = 300010; int n, m; int a[N], s[N]; vector&amp;lt;int&amp;gt; alls; vector&amp;lt;PII&amp;gt; add, query; // 将x映射到索引为(1--alls.size())的数 int find(int x) { int l = 0, r = alls.size() - 1; while (l &amp;lt; r) { int mid = l + r &amp;gt;&amp;gt; 1; if (alls[mid] &amp;gt;= x) r = mid; else l = mid + 1; } return r + 1; } int main() { cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m; for (int i = 0; i &amp;lt; n; i++) { int x, c; cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; c; add.</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/803/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/803/</guid><description>#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; typedef pair&amp;lt;int, int&amp;gt; PII; const int N = 100010; void merge(vector&amp;lt;PII&amp;gt; &amp;amp;segs) { vector&amp;lt;PII&amp;gt; res; sort(segs.begin(), segs.end()); int st = -2e9, ed = -2e9; for (auto seg : segs) { if (ed &amp;lt; seg.first) { if (ed != -2e9) res.push_back({st, ed}); st = seg.first, ed = seg.second; } else { ed = max(ed, seg.second); } } if (st != -2e9) res.push_back({st, ed}); segs = res; } int main() { int n; vector&amp;lt;PII&amp;gt; segs; cin &amp;gt;&amp;gt; n; for (int i = 0; i &amp;lt; n; i++) { int l, r; cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r; segs.</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/826/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/826/</guid><description>Link
#include &amp;lt;iostream&amp;gt;using namespace std; const int N = 100010; int head, e[N], ne[N], idx; void init() { head = -1; idx = 0; } void add_to_head(int x) { e[idx] = x; ne[idx] = head; head = idx; idx++; } // 将x插入到下标是k的点面 void add(int k, int x) { e[idx] = x; ne[idx] = ne[k]; ne[k] = idx; idx++; } // 将下标是k的点后面的点删掉 void remove(int k) { ne[k] = ne[ne[k]]; } int main() { int m; cin &amp;gt;&amp;gt; m; init(); while (m--) { int k, x; char op; cin &amp;gt;&amp;gt; op; if (op == &amp;#39;H&amp;#39;) { cin &amp;gt;&amp;gt; x; add_to_head(x); } else if (op == &amp;#39;D&amp;#39;) { cin &amp;gt;&amp;gt; k; if (!</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/827/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/827/</guid><description>Link
#include &amp;lt;iostream&amp;gt;using namespace std; const int N = 100010; int idx, e[N], l[N], r[N]; void init() { // 0表示head 1表示tail r[0] = 1, l[1] = 0; idx = 2; } // 在下标为k的右边插入 void add(int k, int x) { e[idx] = x; l[idx] = k; r[idx] = r[k]; l[r[k]] = idx; r[k] = idx; idx++; } void remove(int k) { r[l[k]] = r[k]; l[r[k]] = l[k]; } int main() { int n; cin &amp;gt;&amp;gt; n; init(); while (n--) { string op; cin &amp;gt;&amp;gt; op; int k, a; if (op == &amp;#34;R&amp;#34;) { cin &amp;gt;&amp;gt; a; add(l[1], a); } else if (op == &amp;#34;L&amp;#34;) { cin &amp;gt;&amp;gt; a; add(0, a); } else if (op == &amp;#34;D&amp;#34;) { cin &amp;gt;&amp;gt; k; remove(k + 1); } else if (op == &amp;#34;IL&amp;#34;) { cin &amp;gt;&amp;gt; k &amp;gt;&amp;gt; a; add(l[k + 1], a); } else if (op == &amp;#34;IR&amp;#34;) { cin &amp;gt;&amp;gt; k &amp;gt;&amp;gt; a; add(k + 1, a); } } for (int i = r[0]; i !</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/830/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/830/</guid><description>
#include &amp;lt;iostream&amp;gt; const int N = 100010; int n; int stk[N], tt; int main() { cin &amp;gt;&amp;gt; n; for (int i = 0; i &amp;lt; n; i++) { int x; cin &amp;gt;&amp;gt; x; while (tt &amp;amp;&amp;amp; skt[tt] &amp;gt;= x) tt--; if (tt) { cout &amp;lt;&amp;lt; skt[tt] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } else { cout &amp;lt;&amp;lt; -1 &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } skt[++tt] = x; } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/831/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/831/</guid><description>#include &amp;lt;iostream&amp;gt; using namespace std; const int N = 10010, M = 10010; int n, m; char p[N], s[M]; int ne[N]; int main() { cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; p + 1 &amp;gt;&amp;gt; m &amp;gt;&amp;gt; s + 1; for (int i = 2, j = 0; i &amp;lt;= n; i++) { while (j &amp;amp;&amp;amp; p[i] != p[j + 1]) j = ne[j]; if (p[i] == p[j + 1]) j++; ne[i] = j; } for (int i = 1, j = 0; i &amp;lt;= m; i++) { while (j &amp;amp;&amp;amp; s[i] !</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/835/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/835/</guid><description>#include &amp;lt;iostream&amp;gt; using namespace std; const int N = 100010; // idx=0 为根, cnt[n]:以n为结尾的数量 int son[N][26], cnt[N], idx; char str[N]; void insert(char str[]) { int p = 0; for (int i = 0; str[i]; i++) { int u = str[i] - &amp;#39;a&amp;#39;; if (!son[p][u]) son[p][u] = ++ idx; p = son[p][u]; } cnt[p]++; } int query(char str[]) { int p = 0; for (int i = 0; str[i]; i++) { int u = str[i] - &amp;#39;a&amp;#39;; if (!</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/836/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/836/</guid><description>
Link
#include &amp;lt;iostream&amp;gt; using namespace std; const int N = 100010; int p[N]; int n, m; int find(int x) { if (p[x] != x) p[x] = find(p[x]); return p[x]; } int main() { cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m; for (int i = 1; i &amp;lt;= n; i++) p[i] = i; while (m--) { char op[2]; int a, b; scanf(&amp;#34;%s%d%d&amp;#34;, op, &amp;amp;a, &amp;amp;b); if (op[0] == &amp;#39;M&amp;#39;) { p[find(a)] = find(b); } else { if (find(a) == find(b)) puts(&amp;#34;Yes&amp;#34;); else puts(&amp;#34;No&amp;#34;); } } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/837/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/837/</guid><description>
#include &amp;lt;iostream&amp;gt; using namespace std; const int N = 100010; int p[N], sz[N]; int n, m; int find(int x) { if (p[x] != x) p[x] = find(p[x]); return p[x]; } int main() { cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m; for (int i = 1; i &amp;lt;= n; i++) { p[i] = i; sz[i] = 1; } while (m--) { char op[5]; int a, b; scanf(&amp;#34;%s&amp;#34;, op); if (op[0] == &amp;#39;C&amp;#39;) { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;a, &amp;amp;b); if (find(a) == find(b)) continue; sz[find(b)] += sz[find(a)]; p[find(a)] = find(b); } else if (op[1] == &amp;#39;1&amp;#39;) { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;a, &amp;amp;b); if (find(a) == find(b)) puts(&amp;#34;Yes&amp;#34;); else puts(&amp;#34;No&amp;#34;); } else { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a); printf(&amp;#34;%d\n&amp;#34;, sz[find(a)]); } } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/838/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/838/</guid><description>Link
#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; const int N = 100010; int n, m; int h[N], sz; void down(int u) { int t = u; if (u * 2 &amp;lt;= sz &amp;amp;&amp;amp; h[u * 2] &amp;lt; h[t]) t = u * 2; if (u * 2 + 1 &amp;lt;= sz &amp;amp;&amp;amp; h[u * 2 + 1] &amp;lt; h[t]) t = u * 2 + 1; if (t !</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/839/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/839/</guid><description>#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;string.h&amp;gt; using namespace std; const int N = 100010; int h[N], ph[N], hp[N], sz; void heap_swap(int a, int b) { swap(ph[hp[a]], ph[hp[b]]); swap(hp[a], hp[b]); swap(h[a], h[b]); } void down(int u) { int t = u; if (u * 2 &amp;lt;= sz &amp;amp;&amp;amp; h[u * 2] &amp;lt; h[t]) t = u * 2; if (u * 2 + 1 &amp;lt;= sz &amp;amp;&amp;amp; h[u * 2 + 1] &amp;lt; h[t]) t = u * 2 + 1; if (t !</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/840/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/840/</guid><description>开放寻址法
#
#include &amp;lt;cstring&amp;gt;#include &amp;lt;iostream&amp;gt; using namespace std; const int N = 2000003, null = 0x3f3f3f3f; int h[N]; bool find(int x) { int k = (x % N + N) % N; while (h[k] != null &amp;amp;&amp;amp; h[k] != x) { k++; if (k == N) k = 0; } return k; } int main() { int n; cin &amp;gt;&amp;gt; n; memset(h, 0x3f, sizeof(h)); while (n--) { char op[2]; int x; scanf(&amp;#34;%s%d&amp;#34;, op, &amp;amp;x); int k = find(x); if (*op == &amp;#39;I&amp;#39;) h[k] = x; else { if (h[k] !</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/841/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/841/</guid><description>
#include &amp;lt;iostream&amp;gt;using namespace std; typedef unsigned long long ULL; const int N = 100010, P = 131; int n, m; char str[N]; ULL h[N], p[N]; ULL get(int l, int r) { return h[r] - h[l - 1] * p[r - l + 1]; } int main() { scanf(&amp;#34;%d%d%s&amp;#34;, &amp;amp;n, &amp;amp;m, str + 1); p[0] = 1; for (int i = 1; i &amp;lt;= n; i++) { p[i] = p[i - 1] * P; h[i] = h[i - 1] * P + str[i]; } while (m--) { int l1, r1, l2, r2; scanf(&amp;#34;%d%d%d%d&amp;#34;, &amp;amp;l1, &amp;amp;r1, &amp;amp;l2, &amp;amp;r2); if (get(l1, r1) == get(l2, r2)) puts(&amp;#34;Yes&amp;#34;); else puts(&amp;#34;No&amp;#34;); } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/842/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/842/</guid><description>
#include &amp;lt;iostream&amp;gt; using namespace std; const int N = 10; int n; int path[N]; bool st[N]; void dfs(int u) { if (u == n) { for (int i = 0; i &amp;lt; n; i++) printf(&amp;#34;%d &amp;#34;, path[i]); puts(&amp;#34;&amp;#34;); return; } for (int i = 1; i &amp;lt;= n; i++) { if (!st[i]) { path[u] = i; st[i] = true; dfs(u + 1); st[i] = false; } } } int main() { cin &amp;gt;&amp;gt; n; dfs(0); return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/843/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/843/</guid><description>#include &amp;lt;iostream&amp;gt; using namespace std; const int N = 20; int n; char g[N][N]; bool col[N], dg[N], udg[N]; void dfs(int u) { if (u == n) { for (int i = 0; i &amp;lt; n; i++) puts(g[i]); puts(&amp;#34;&amp;#34;); return; } for (int i = 0; i &amp;lt; n; i++) { if (!col[i] &amp;amp;&amp;amp; !dg[u + i] &amp;amp;&amp;amp; !udg[u - i + n]) { g[u][i] = &amp;#39;Q&amp;#39;; col[i] = dg[u + i] = udg[u - i + n] = true; dfs(u + 1); g[u][i] = &amp;#39;.</description></item></channel></rss>