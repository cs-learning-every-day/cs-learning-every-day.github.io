<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Day Day Up</title><link>https://cs-learning-every-day.github.io/docs/acwing/</link><description>Recent content on Day Day Up</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://cs-learning-every-day.github.io/docs/acwing/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/786/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/786/</guid><description>
#include &amp;lt;iostream&amp;gt; using namespace std; int q[100001]; int quick_sort(int l, int r, int k) { if (l == r) { return q[l]; } int x = q[l], i = l - 1, j = r + 1; while (i &amp;lt; j) { while (q[++i] &amp;lt; x); while (q[--j] &amp;gt; x); if (i &amp;lt; j) { swap(q[i], q[j]); } } int sl = j - l + 1; if (k &amp;lt;= sl) return quick_sort(l, j, k); return quick_sort(j + 1, r, k - sl); } int main() { int n, k; cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k; for (int i = 0; i &amp;lt; n; i++) { cin &amp;gt;&amp;gt; q[i]; } cout &amp;lt;&amp;lt; quick_sort(0, n - 1, k); return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/788/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/788/</guid><description>
Link
class Solution { private int[] tmp; public int reversePairs(int[] nums) { tmp = new int[nums.length]; return mergeSort(nums, 0, nums.length - 1); } private int mergeSort(int[] nums, int l, int r) { if (l &amp;gt;= r) { return 0; } int mid = (l + r) &amp;gt;&amp;gt; 1; int res = mergeSort(nums, l, mid) + mergeSort(nums, mid + 1, r); // 归并 int i = l, j = mid + 1, k = 0; while (i &amp;lt;= mid &amp;amp;&amp;amp; j &amp;lt;= r) { if (nums[i] &amp;lt;= nums[j]) { tmp[k++] = nums[i++]; } else { tmp[k++] = nums[j++]; res += (mid - i + 1); } } while (i &amp;lt;= mid) { tmp[k++] = nums[i++]; } while (j &amp;lt;= r) { tmp[k++] = nums[j++]; } for (i = l, j = 0; i &amp;lt;= r; i++, j++) { nums[i] = tmp[j]; } return res; } }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/790/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/790/</guid><description>
#include &amp;lt;iostream&amp;gt; using namespace std; int main() { double x; cin &amp;gt;&amp;gt; x; double l = -1e4, r = 1e4; while (r - l &amp;gt; 1e-8) { double m = (l + r) / 2; if (m * m * m &amp;gt;= x) { r = m; } else { l = m; } } printf(&amp;#34;%.6lf&amp;#34;, r); return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/791/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/791/</guid><description>#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; const int N = 1e6 + 10; vecotr&amp;lt;int&amp;gt; add(vecotr&amp;lt;int&amp;gt; &amp;amp;A, vecotr&amp;lt;int&amp;gt; &amp;amp;B) { vector&amp;lt;int&amp;gt; C; int t = 0; for (int i = 0; i &amp;lt; A.size() || i &amp;lt; B.size(); i++) { if (i &amp;lt; A.size()) { t += A[i]; } if (i &amp;lt; B.size()) { t += B[i]; } C.push_back(t % 10); t /= 10; } if (t) { C.push_back(1); } return C; } int main() { string a, b; vecotr&amp;lt;int&amp;gt; A, B; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; // a = &amp;#34;123456&amp;#34; for (int i = a.</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/792/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/792/</guid><description>两个正整数相减 A - B 考虑A &amp;lt; 0, B &amp;lt; 0 &amp;ndash;&amp;gt; A - B = -(|A| + |B|) 考虑A &amp;gt; 0, B &amp;lt; 0 &amp;ndash;&amp;gt; A - B = |A| + |B|
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; // 判断A&amp;gt;=B bool cmp(vecotr&amp;lt;int&amp;gt; &amp;amp;A, vecotr&amp;lt;int&amp;gt; &amp;amp;B) { if (A.size() != B.size()) { return A.size() &amp;gt; B.size(); } for (int i = A.size() - 1; i &amp;gt;= 0; i--) { if (A[i] !</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/793/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/793/</guid><description>两个正整数相乘 大*小
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; vecotr&amp;lt;int&amp;gt; mul(vecotr&amp;lt;int&amp;gt; &amp;amp;A, int b) { vecotr&amp;lt;int&amp;gt; C; int t = 0; for (int i = 0; i &amp;lt; A.size() || t != 0; i++) { if (i &amp;lt; A.size()) { t += A[i] * b; } C.push_back(t % 10); t /= 10; } return C; } int main() { string a; int b; vecotr&amp;lt;int&amp;gt; A; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; // a = &amp;#34;123456&amp;#34; for (int i = a.</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/794/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/794/</guid><description>两个正整数相除 大/小
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; vecotr&amp;lt;int&amp;gt; mul(vecotr&amp;lt;int&amp;gt; &amp;amp;A, int b, int &amp;amp;r) { vecotr&amp;lt;int&amp;gt; C; int t = 0; r = 0; for (int i = A.size(); i &amp;gt;= 0; i--) { r = r * 10 + A[i]; C.push_back(r / b); r = r % b; } reverse(C.begin(), C.end()); while (C.size() &amp;gt; 1 &amp;amp;&amp;amp; C.back() == 0) { C.pop_back(); } return C; } int main() { string a; int b; vecotr&amp;lt;int&amp;gt; A; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; // a = &amp;#34;123456&amp;#34; for (int i = a.</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/795/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/795/</guid><description>
#include &amp;lt;iostream&amp;gt;using namespace std; const int N = 100010; int n, m; int a[N], s[N]; int main() { a[0] = 0; s[0] = 0; scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;m); for (int i = 1; i &amp;lt;= n; i++) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i]); } for (int i = 1; i &amp;lt;= n; i++) { s[i] = s[i - 1] + a[i]; } while (m--) { int l, r; scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;r, &amp;amp;l); printf(&amp;#34;%d\n&amp;#34;, s[r] - s[l - 1]); } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/796/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/796/</guid><description>
#include &amp;lt;iostream&amp;gt; const int N = 1010; int n, m, q; int a[N][N], s[N][N]; int main() { scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;n, &amp;amp;m, &amp;amp;q); for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i][j]); } } for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j]; } } while (q--) { int x1, y1, x2, y2; scanf(&amp;#34;%d%d%d%d&amp;#34;, &amp;amp;x1, &amp;amp;y1, &amp;amp;x2, &amp;amp;y2); printf(&amp;#34;%d\n&amp;#34;, s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 -1] + s[x1 - 1][y1 -1]); } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/797/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/797/</guid><description>
#include &amp;lt;iostream&amp;gt;using namespace std; const int N = 100010; int n, m; int a[N], b[N]; void insert(int l, int r, int c) { b[l] += c; b[r + 1] -= c; } int main() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;m); for (int i = 1; i &amp;lt;= n; i++) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i]); } for (int i = 1; i &amp;lt;= n; i++) { insert(i, i, a[i]); } while (m--) { int l, r, c; scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;l, &amp;amp;r, &amp;amp;c); insert(l, r, c); } for (int i = 1; i &amp;lt;= n; i++) { b[i] += b[i - 1]; } for (int i = 1; i &amp;lt;= n; i++) { printf(&amp;#34;%d &amp;#34;, b[i]); } return 0; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/acwing/basic/798/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/acwing/basic/798/</guid><description>
#include &amp;lt;iostream&amp;gt;using namespace std; const int N = 1010; int n, m, q; int a[N][N], b[N][N]; void insert(int x1, int y1, int x2, int y2, int c) { b[x1][y1] += c; b[x2 + 1][y1] -= c; b[x1][y2 + 1] -= c; b[x2 + 1][y2 + 1] += c; } int main() { scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;n, &amp;amp;m, &amp;amp;q); for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i][j]); } } for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { insert(i, j, i, j, a[i][j]); } } while (q--) { int x1, y1, x2, y2, c; scanf(&amp;#34;%d%d%d%d%d&amp;#34;, &amp;amp;x1, &amp;amp;y1, &amp;amp;x2, &amp;amp;y2, &amp;amp;c); insert(x1, y1, x2, y2, c); } for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i - 1][j - 1]; } } for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { printf(&amp;#34;%d &amp;#34;, b[i][j]); } puts(&amp;#34;&amp;#34;); } return 0; }</description></item></channel></rss>