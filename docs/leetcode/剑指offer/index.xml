<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Day Day Up</title><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/</link><description>Recent content on Day Day Up</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/04/</guid><description>
Link
上图是从右上角，同理左下角
class Solution { public boolean findNumberIn2DArray(int[][] matrix, int target) { if (matrix == null || matrix.length == 0) return false; int m = matrix.length; int n = matrix[0].length; int row = m - 1; int col = 0; while (row &amp;gt;= 0 &amp;amp;&amp;amp; col &amp;lt; n) { if (matrix[row][col] == target) { return true; } if (matrix[row][col] &amp;lt; target) { col++; } else { row--; } } return false; } }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/18/</guid><description>
Link
class Solution { public ListNode deleteNode(ListNode head, int val) { ListNode dummy = new ListNode(-1); dummy.next = head; ListNode prev = dummy; ListNode cur = head; while (cur != null) { if (cur.val == val) { prev.next = cur.next; break; } cur = cur.next; prev = prev.next; } return dummy.next; } }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/22/</guid><description>
Link
public ListNode getKthFromEnd(ListNode head, int k) { Stack&amp;lt;ListNode&amp;gt; s = new Stack&amp;lt;&amp;gt;(); while (head != null) { s.push(head); head = head.next; } if (k &amp;gt; s.size()) return null; ListNode res = null; while (k &amp;gt; 0) { k--; res = s.pop(); } return res; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/26/</guid><description>
Link
class Solution { public boolean isSubStructure(TreeNode A, TreeNode B) { if (A == null || B == null) return false; return help(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B); } private boolean help(TreeNode A, TreeNode B) { if (B == null) return true; else if (A == null || A.val != B.val) return false; return help(A.left, B.left) &amp;amp;&amp;amp; help(A.right, B.right); } }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/32_1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/32_1/</guid><description>
Link
class Solution { public int[] levelOrder(TreeNode root) { if (root == null) return new int[]{}; Queue&amp;lt;TreeNode&amp;gt; q = new LinkedList&amp;lt;&amp;gt;(); q.offer(root); List&amp;lt;Integer&amp;gt; tmp = new ArrayList&amp;lt;&amp;gt;(); while (!q.isEmpty()) { TreeNode node = q.poll(); tmp.add(node.val); if (node.left != null) { q.offer(node.left); } if (node.right != null) { q.offer(node.right); } } int[] res = new int[tmp.size()]; int idx = 0; for (int val : tmp) { res[idx++] = val; } return res; } }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/32_2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/32_2/</guid><description>Link
class Solution { public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; levelOrder(TreeNode root) { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); if (root == null) return res; Queue&amp;lt;TreeNode&amp;gt; q = new LinkedList&amp;lt;&amp;gt;(); q.offer(root); q.offer(null); // [3, null, 9, 20, null, 15, 7, null] while (q.peek() != null) { TreeNode node; List&amp;lt;Integer&amp;gt; tmp = new ArrayList&amp;lt;&amp;gt;(); while ((node = q.poll()) != null) { if (node.left != null) { q.offer(node.left); } if (node.right != null) { q.</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/32_3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/32_3/</guid><description>Link
class Solution { public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; levelOrder(TreeNode root) { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); Queue&amp;lt;TreeNode&amp;gt; q = new LinkedList&amp;lt;&amp;gt;(); if (root != null) { q.offer(root); } while (!q.isEmpty()) { LinkedList&amp;lt;Integer&amp;gt; tmp = new LinkedList&amp;lt;&amp;gt;(); int n = res.size(); for (int i = q.size(); i &amp;gt; 0; i--) { TreeNode node = q.poll(); if (n % 2 == 0) { tmp.addLast(node.val); } else { tmp.addFirst(node.val); } if (node.left !</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/46/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/46/</guid><description>Link
DFS
public int translateNum(int num) { return dfs(String.valueOf(num), 0); } private int dfs(String str, int start) { if (start &amp;gt;= str.length()) return 1; int res = 0; int tmp = str.charAt(start) - &amp;#39;0&amp;#39;; if (isValid(tmp)) { res = dfs(str, start + 1); } if (start &amp;lt; str.length() - 1) { // 06 if (tmp == 0) return res; tmp = tmp * 10 + (str.charAt(start + 1) - &amp;#39;0&amp;#39;); if (isValid(tmp)) { res += dfs(str, start + 2); } } return res; } private boolean isValid(int val) { return 0 &amp;lt;= val &amp;amp;&amp;amp; val &amp;lt;= 25; } 动态规划</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/47/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/47/</guid><description>
Link
class Solution { public int maxValue(int[][] grid) { int m = grid.length; int n = grid[0].length; int[][] dp = new int[m + 1][n + 1]; for (int i = 1; i &amp;lt;= m; i++) { for (int j = 1; j &amp;lt;= n; j++) { dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + grid[i - 1][j - 1]; } } return dp[m][n]; } }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/48/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/48/</guid><description>
Link
双指针
public int lengthOfLongestSubstring(String s) { char[] chs = s.toCharArray(); int res = 0; int i = 0, j = 0; Map&amp;lt;Character, Boolean&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); while (j &amp;lt;= i &amp;amp;&amp;amp; i &amp;lt; chs.length) { if (map.getOrDefault(chs[i], false)) { res = Math.max(res, i - j); map.put(chs[j], false); j++; } else { map.put(chs[i], true); res = Math.max(res, i - j + 1); i++; } } return res; }</description></item><item><title/><link>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/50/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cs-learning-every-day.github.io/docs/leetcode/%E5%89%91%E6%8C%87offer/code/50/</guid><description>
Link
class Solution { public char firstUniqChar(String s) { Map&amp;lt;Character, Boolean&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); int[] counts = new int[26]; char[] chs = s.toCharArray(); for (char c : chs) { counts[c - &amp;#39;a&amp;#39;]++; map.put(c, !map.containsKey(c)); } for (char c : chs) { if (map.get(c)) return c; } return &amp;#39; &amp;#39;; } }</description></item></channel></rss>